Задачи за самоподготовка
Задача 1
● Дефинирайте структура Animal с два member-а: име на вида на животното и това
дали е тревопасно, хищник или всеядно ( Herbivore, Carnivore, Omnivore съответно ).
Използвайте enum за класификацията на видовете животни според вида на храната
им.
● Използвайте typedef при дефиницията на структурата и enum-a за да не се налага да
пишем struct или enum всеки път когато декларираме променлива от тези типове.
● Използвайте typedef за да дадете алтернативно име на тип : указател към Animal
● Напишете функция, която приема масив от Animal и принтира информацията за
всеки елемент от масива. За целта ползвайте “новия тип”(ANIMAL_PTR) от
предходната точка. Дефинирайте и инициализирайте масив от животни, тествайте
функцията с масива
Задачи за самоподготовка
Задача 2
Използвайте typedef за да дефинирате алтернативни имена на следните типове:
● масив с 8 int елемента: arr8_i
● указател към arr8_i: arr8_i_ptr
● масив с 8 елемента от тип arr8_i: arr2d8_i
● указател към arr2d8_i: arr2d8_i_ptr
Използвайте enum константа за размера - 8
Дефинирайте функции за принтиране на arr8_i и на arr2d8_i.
Създайте променливи от четирите типа, като ги инициализирате(при дефиницията).
Инициализирайте arr8_i_ptr и arr2d8_i_ptr променливите с адреси на compound literal-
и(при дефиницията).
Задачи за самоподготовка
Нека направим модул за дни и дати за програмата за отдаване на ПС под наем (пример:
datetime.h, datetime.c)
Задача 3
Дефинирайте enum константи за ден в седмицата и месец в годината (например: enum
weekday, enum month, E_Weekday, E_Month, ..).
Дефинирайте алтернативно име на типовете с typedef, така че да не се налага да
ползваме ключовата дума enum при дефиниция на променливи от типовете.
Задача 4
Дефинирайте структура, която репрезентира календарна дата (например: struct datetime)
и има членове за:
● Година
● Месец
● Ден от месеца
Задачи за самоподготовка
Нека направим модул за дни и дати за програмата за отдаване на ПС под наем (пример: datetime.h, datetime.c).
За целта, може да ползвате типовете (tm, например) и функциите от <time.h>
https://www.thegeekdiary.com/c-library/
https://www.tutorialspoint.com/c_standard_library/time_h.htm
https://en.wikibooks.org/wiki/C_Programming/time.h
https://en.cppreference.com/w/c/chrono
Задача 5
Дефинирайте следните функции:
● Функция, която приема като аргументи начален datetime(от предходната задача) и брой дни и връща
datetime, който репрезентира датата след <брой дни> от от началната дата. Ако <брой дни> има
отрицателна стойност, функцията връща датата, която е <-брой дни> преди началната дата (функция за
“събиране” на дата с цяло число за брой дни)
● Функция, която приема като аргументи два datetime обекта и връща разликата в дни от първия аргумент до
втория. Функцията връща отрицателна стойност ако първият аргумент е дата, която е хронологически след
датата от втория аргумент (функция за “изваждане на дата от дата”, която връща разликата в брой дни)
Задачи за самоподготовка
Нека направим модул за дни и дати за програмата за отдаване на ПС под наем (пример: datetime.h, datetime.c).
За целта, може да ползвате функцията strftime от <time.h> или sprintf от <stdio.h>
https://en.cppreference.com/w/c/chrono/strftime
https://www.tutorialspoint.com/c_standard_library/c_function_strftime.htm
https://www.geeksforgeeks.org/strftime-function-in-c/
https://en.cppreference.com/w/c/io/fprintf
https://www.geeksforgeeks.org/sprintf-in-c/
https://www.tutorialspoint.com/c_standard_library/c_function_sprintf.htm
Задача 6
Дефинирайте функция, която приема datetime обект и указател към стринг, форматира стринга по избран от вас
формат (“Jan 20, 2023”, “20.01.2023”, “1/20/2023”, .. ). За удобство, функцията може да връща указател към
началото на стринга. По желание добавете параметри за избор на форматиране (стринг със спецификатори за
форматиране, или пък дефинирайте enum за конкретни формати за календарна дата или пък дори езици, които
поддържа приложението)