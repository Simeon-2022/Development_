#include "/media/sf_Shared/Final_project/7_Library/Headers/funcSql.h"
#include "/media/sf_Shared/Final_project/7_Library/Headers/Overpayments.h"
#include "/media/sf_Shared/Final_project/7_Library/Headers/utility.h"
#include "/media/sf_Shared/Final_project/7_Library/Headers/funcErrorHandling.h"
#include "/media/sf_Shared/Final_project/7_Library/Headers/configMacro.h"
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <sqlca.h>
#include <oraca.h>

#define AFFECTED_ROWS ((int)(sqlca.sqlerrd[2]))

EXEC SQL INCLUDE sqlca;

EXEC SQL BEGIN DECLARE SECTION;
	char custExtRef[MAX_EXTERNAL_REF_LENGHT] = {'\0'};
	char invoice_no[MAX_INVOICE_NUMBER_LENGHT] = {0};
	char payment_id1[MAX_PEYMENT_ID_LENGHT] = {0};
	char payment_dt[MAX_DATE_2_LENGHT] = {0};
	double amount = 0.0;
	char payment_method[MAX_PEYMENT_METOD_LENGHT] = {0};
	char currency[MAX_LINE_CURRENCY_LENGHT] = {0};
	char fg_processed[2] = {0};
	char iban[MAX_PEYMENT_IBAN_LENGHT]= {0};
	char bank_name[MAX_PEYMENT_BANK_NAME_LENGHT] = {0};
	char created_by[MAX_PEYMENT_CREATED_BY_LENGHT] = {0};
	char free_text[MAX_SIZE_LINE] = {0};
	char original_payment_id1[MAX_PEYMENT_ID_LENGHT] = {0};
	char inv_no[MAX_INVOICE_NUMBER_LENGHT] ={0};

	short tr_invoice_no = -1;
	short tr_payment_id = -1;
	short tr_payment_dt = -1;
	short tr_amount = -1;
	short tr_payment_method = -1;
	short tr_currency = -1;
	short tr_fg_processed = -1;
	short tr_iban = -1;
	short tr_bank_name = -1;
	short tr_created_by = -1;
	short tr_free_text = -1;
	short tr_original_payment_id = -1;
EXEC SQL END DECLARE SECTION;

void update_payments_with_invoices(const char *custExtRef)
{
    EXEC SQL BEGIN DECLARE SECTION;
	char custExtRefCpy[MAX_EXTERNAL_REF_LENGHT] = {'\0'};
	int extCustRefFlag = 0;
    int payment_found = 1;
	double amnt_due = 0.0;
	int inputCustID = 0;
	int rowCustID = 0;
	int insertCoun = 0;
	EXEC SQL END DECLARE SECTION;	

	if(custExtRef[0] != '\0')
	{
		strcpy(custExtRefCpy,custExtRef);
		stringTrim(custExtRefCpy);
		EXEC SQL WHENEVER SQLERROR DO sql_error(ORA_ERR_FORMAT_7);
		EXEC SQL SELECT customer_id into :inputCustID from customers where external_reference = :custExtRefCpy;
		if (0 == sqlca.sqlcode)	{extCustRefFlag = 1;}
		else
		{
		EXEC SQL WHENEVER SQLERROR DO sql_error(ORA_ERR_FORMAT_7);
		ERROR_LOG_MSG("Not exists external reference", custExtRef);
		OUTPUT_LOG_MSG("Not exists external reference", custExtRef);
		return;	
		}
	}

	while(payment_found)
	{
		payment_found = 0;	
		EXEC SQL DECLARE payment_cursor CURSOR FOR SELECT * FROM over_payments;
		EXEC SQL WHENEVER SQLERROR DO sql_error(ORA_ERR_FORMAT_8);
		EXEC SQL OPEN payment_cursor;
		OUTPUT_LOG_MSG(program.programName, ORA_MSG_FORMAT_11);


    while (1) {	
	EXEC SQL WHENEVER SQLERROR DO sql_error(ORA_ERR_FORMAT_10);
    EXEC SQL FETCH payment_cursor 
	INTO :invoice_no:tr_invoice_no, 
		:payment_id1:tr_payment_id,
		:payment_dt:tr_payment_dt,
		:amount:tr_amount,
		:payment_method:tr_payment_method,
		:currency:tr_currency,
		:fg_processed:tr_fg_processed,
		:iban:tr_iban,
		:bank_name:tr_bank_name,
		:created_by:tr_created_by,
		:free_text:tr_free_text,
		:original_payment_id1:tr_original_payment_id;
	
	if (0 == sqlca.sqlcode) {
		if (sqlca.sqlerrd[2] > 0) {
			OUTPUT_LOG_MSG("Processing payment ID", payment_id1);
		} else {
			OUTPUT_LOG_MSG("Cursor not found", "Break cycle");
			ERROR_PRINT(ORA_ERR_FORMAT_10);
			break;
		}
	}else{
		OUTPUT_LOG_MSG("Cursor not found", "Break cycle");
		ERROR_PRINT(ORA_ERR_FORMAT_10);
		break;
	}
	
	stringTrim(payment_id1);
	stringTrim(iban);
	stringTrim(bank_name);
	stringTrim(free_text);
	stringTrim(original_payment_id1);

	EXEC SQL SELECT i.customer_id INTO :rowCustID
	FROM invoices i, payments p 
	WHERE i.inv_no = p.invoice_no
	AND p.payment_id = :original_payment_id1;
	
	if(extCustRefFlag && (inputCustID != rowCustID)) { continue;}	
	
	amnt_due = 0.0; inv_no[0] ='\0';
	EXEC SQL WHENEVER SQLERROR DO sql_error(ORA_ERR_FORMAT_7);
	EXEC SQL SELECT inv_no, amount_due into :inv_no, :amnt_due
    FROM invoices
    WHERE customer_id = :rowCustID
	AND amount_due > 0
    AND ROWNUM = 1;

	stringTrim(inv_no);
	OUTPUT_LOG_MSG("Select invoice ", inv_no);

	if ((strlen(inv_no)>0)&&(amnt_due > 0)) {
	
	payment_found = 1;	
			
	EXEC SQL WHENEVER SQLERROR DO sql_error(ORA_ERR_FORMAT_5);
	EXEC SQL INSERT INTO payments ( invoice_no, payment_id, payment_dt, amount, payment_method, currency, fg_processed, iban, bank_name, created_by, free_text, original_payment_id) 
								VALUES (:inv_no,:payment_id1, :payment_dt,:amount, :payment_method, :currency, :fg_processed, :iban, :bank_name, :created_by, :free_text, :original_payment_id1);
		
	if (0 == sqlca.sqlcode)	
	{
		fprintf (program.pOutputFile, "\nPayments_test inserted %d record(s).\n", AFFECTED_ROWS); 
		insertCoun++;
		EXEC SQL DELETE FROM over_payments WHERE  payment_id = :payment_id1;
		OUTPUT_LOG_MSG("Delete old record from table", "Overpayment");	
	}
	else
	{
		OUTPUT_LOG_MSG(program.programName, ORA_ERR_FORMAT_5);
		ERROR_PRINT(ORA_ERR_FORMAT_5);
	}
    exec_commit();
    }
	}
	EXEC SQL WHENEVER SQLERROR DO sql_error(ORA_ERR_FORMAT_9);
    EXEC SQL CLOSE payment_cursor;
	if (sqlca.sqlcode != 0)
	{
	    OUTPUT_LOG_MSG(program.programName, ORA_ERR_FORMAT_5);
		ERROR_PRINT(ORA_ERR_FORMAT_5);
    }
	OUTPUT_LOG_MSG(program.programName, ORA_MSG_FORMAT_12);
	}
	printf("\nIn table Payments have been inserted %d record(s).\n", insertCoun);
	fprintf(program.pOutputFile, "\nPayments_test inserted %d record(s).\n", insertCoun);
}
	
