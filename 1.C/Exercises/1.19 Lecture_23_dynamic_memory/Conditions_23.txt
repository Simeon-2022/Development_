Задачи за самоподготовка
Задача 1
Да се направи програма, която заделя динамичен масив с брой елементи зададени от
потребителя. За всеки елемент от масива се очаква потребителят да въведе цяло и число и
след това се изчислява сумата на всички елементи от масива.

Задача 2
Заделете динамично памет за char* buffer с размер size = 2.
Използвайте getchar за въвеждане на текст от стандартния вход до достигане на EOF.
Реалокирайте динамично паметта при нужда (при въвеждане на все по-дълъг текст).
Принтирайте буфера и освободете паметта.

Задача 3
Дефинирайте нов тип - списък с указатели към стрингове (към началото им - char*).
Дефинирайте следните интерфейсни функции (”my_” e примерно име на библиотека. Би могло и да е “str”, тъй
като е списък с char* елементи):
● Функция за инициализация на членовете на списъка:
void my_list_init(my_list ls);
● Приемлив интерфейс е и : void my_list_init(my_list *ls);
● Същото важи и за останалите функции.
● Функция за проверка на това дали списъкът е празен:
_Bool my_list_empty(my_list ls);
● Функция за премахването на всички елементи на списъка:
void my_list_clear(my_list ls);
Задачи за самоподготовка

Задача 4 (продължение от задача 3)
● Дефинирайте функции за добавяне на елементи на начална, крайна и конкретна позиция
в списъка:
void my_list_push_back(char *data, my_list ls);
void my_list_push_front(char *data, my_list ls);
void my_list_insert(char *data, my_list ls, size_t pos);

Задача 5 (продължение от задача 3)
● Дефинирайте функции за изтриване на елементи на начална, крайна и конкретна
позиция в списъка:
void my_list_pop_back(my_list ls);
void my_list_pop_front(my_list ls);
void my_list_erase(my_list ls, size_t pos);
Задачи за самоподготовка

Задача 6 (продължение от задача 3)
● Дефинирайте функции за промяна на броя на елементите на списъка:
void my_list_resize(my_list ls, size_t elementsCount);
void my_list_resize_init(my_list ls, size_t elementsCount,char *defaultValue );
Ако elementsCount е по-малък от текущия размер, съдържанието на списъка става първите
elementsCount и останалите се унищожават.
Ако elementsCount е по-голямо от текущия размер, списъкът се разширява до elementsCount
брой елементи, като:
● my_list_resize инициализира новите елементи на NULL
● my_list_resize_init инициализира новите елементи на стойността на 3тия си параметър:
defaultValue
Задачи за самоподготовка

Задача 7 (продължение от задача 3)
● Дефинирайте функции за изтриване на елемент от списъка по зададен предикат - условие, дефинирано от
клиента, при което трием елемент:
size_t my_list_erase_if(my_list ls, _Bool (*predicateFunc)(char*));
Функцията, подадена от клиента като аргумент трябва да бъде извикана за всеки елемент от списъка.
Трием тези елементи, за които връща 1.

Задача 8 (продължение от задача 3)
● Дефинирайте функция за итериране на елементите на списъка, която приема указател към друга
функция, подадена от клиента, която извършва желаните операции на всеки отделен елемент от списъка.
void my_list_iterate(my_list ls, void (*iterFunc)(char*));
Функцията за итериране трябва да извиква подадената й като аргумент функция за всеки елемент на
списъка.