Задачи за самоподготовка
Задача 1
● Напишете програма, която преобразува string в целочислено число(unsigned int). Низът
може да е число от всяка [2-10]-мерна бройна система(т.е. може да има само символи,
които са цифри):
unsigned ParseUnsignedLiteral(const char * str, int base);
unsigned u = ParseUnsignedLiteral("0011", 2); // u is (unsigned)3
● Примерни входни данни:
“0010” - base 2 (bin),
“12345670” - base 8 (oct)
“876543210” - base 9
“9876543210” - base 10 (dec)

Задача 2
● Разширете възможностите на програмата от Задача 1:
Нека низът да може да е число от всяка [2-36]-мерна бройна система(т.е. може да има само
символи, които са цифри и букви):
unsigned ParseUnsignedLiteral(const char * str, int base);
unsigned u = ParseUnsignedLiteral("00A", 16); // u is (unsigned)10
● Примерни входни данни:
“1010” - base 2 (bin),
“98210” - base 10 (dec)
“A93210” - base 11
“F3f3FE” - base 16 (hex)
“xxZZZZ” - base 36
Задачи за самоподготовка

Задача 3
● Напишете програма, която преобразува c string литерала в целочислено
число(unsigned int). Низът може да има представка, коята променя типа на литералата:
○ 0b, 0B - binary
○ 0x, 0X - hex
○ 0 - oct
● Прототип на функцията за преобразуване:
unsigned u = ParseUnsignedLiteral("0x0001"); // u is (unsigned)1
Задачи за самоподготовка

Задача 4
Напишете функция, която обръща string наобратно
char str[] = "Hello\n";
reverseString(str); // "\nolleH"
Използвайте единствен for цикъл с две променливи за индексация:
for(i = 0, j = strLength - 1; i < j; i++, j--)
Задачи за самоподготовка

Задача 5
Използвайте do-while цикъл, за да напишете функцията void itoa(int n, char
s[]), която преобразува число в символен низ (обратната функция на atoi).
do-while цикълът e необходим, тъй като в масива ще трябва да се постави
поне един символ, дори ако n е нула. Ако n = 123, за да вземем последната
цифра, трябва да разделим n по модул(%) на основата на бройната
система 10. За да получите чаръктър число, трябва да съберете резултата
с '0'. За да вземете следващото число, трябва да разделите n на 10. Това
продължава докато n е различно от нула. Това генерира низа в обратен ред
– 321, затова използваме reverse функцията от предходната задача.
Задачи за самоподготовка

Задача 6
● Напишете функция void replace(char *str, int oldChar, int newChar),
която подменя всяко срещане на даден символ в стринг аргумента
си с с друг
char str[] = "Hello\n";
replace(str, 'e', '3'); // "H3llo\n"
Задачи за самоподготовка

Задача 7
● Напишете функция void squeeze(char s[], int c), която премахва
символа с от низа s[]
char str[] = "Hello\n";
squeeze(str, 'o'); // "Hell\n"
Задачи за самоподготовка

Задача 8
Напишете алтернативна версия на функцията
void squeeze(char s1[], const char s2[]), която премахва всеки символ в
s1[], който съответства на някой от символите в s2.
char str[] = "Hello\n";
squeeze(str, "Hl");
printf("%s", str); // "eo\n"
Задачи за самоподготовка

Задача 9
Напишете функцията int find_any(const char s1[], const char s2[]), която
връща първата позиция в низа s1, където се появява някой от
символите в низа s2, или -1 ако не е намерен нито един символ.
// returns 1, as "Hello"[1] == 'e', which is found in "oe"
int index = find_any("Hello", "oe");
if (index >= 0)
//..
Задачи за самоподготовка

Задача 10
Напишете функцията void toLower(char s[]), която преобразува всички
главни букви в малки.
char str[] = "HEllo, 123\n";
toLower(str);
printf("%s", str); // should print "hello, 123\n"