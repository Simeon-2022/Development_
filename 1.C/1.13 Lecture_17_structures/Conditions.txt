Задачи за самоподготовка
Да положим основите на библиотека за 2D геометрични функции, полезни в редица
приложения, свързани с компютърна графика, например.
math2d.h
Нека ползваме float за всички типове и функции от библиотеката.
Задача 1
Дефинирайте следните типове, изполвайки struct:
● точка в равнината(2D), примерни имена: point2f, point2, vec2f, vec2, vec2df, ..
● триъгълник в равнината
● кръг
● правоъгълник (axis-aligned - без ротация, винаги с перпендикулярни страни на абцисната и
ординатна оси - на страните на екрана), примерни имена : rect2df, aabb2, ..
● полигон (с от 3 до 8 върха - vertices)
Задачи за самоподготовка
Задача 2
Дефинирайте функция, която проверява дали точка е във вътрешността на кръг
Задача 3
Дефинирайте функция, която проверява дали точка е във вътрешността на правоъгълник (aabb)
Задача 4
Дефинирайте функция, която проверява дали два кръга имат допирни точки (не се пресичат и нито единия не е
изцяло във вътрешността на другия)
..
Задача 5
Дефинирайте функция за пресмятането на разстоянието между две точки в равнината.
Задача 6
Дефинирайте функции за въвеждане на всяка една от шестте геометрични фигури от потребителя
Задача 7
Дефинирайте функции всяка за принтиране на всяка една от шестте геометрични фигури
Задача 8 (1/2)
Направете нова версия на програмата за отдаване на превозни средства под наем. В бъдеще ще разширим функционалността на
програмата да работи с файлове и дати, засега ще четем хард-коднати свободни превозни средства(ПС) и ще ги отдаваме едно по едно
докато не свършат или не излезем от програмата.
● Програмата трябва да има следните менюта:
○ Main Menu, със следните опции:
■ Press 1 to choose vehicle (води до Choose Vehicle Menu с всички свободни ПС)
■ Press 2 to choose vehicle by brand(води до Choose Brand Menu с всички марки от които има налични ПС, след което до
Choose Vehicle Menu с всички свободни ПС от избраната марка)
■ Press q to quit.
○ Choose Vehicle Menu - списък с множество свободни ПС(в зависимост от контекста, някой път всички, друг път - от дадена
марка), с опция за избор на ПС(водеща до Vehicle Details Menu) + опция за връщане в Main Menu (“Press b to go back to
Main Menu”)
○ Choose Brand Menu - списък с марки ПС, за които има налично свободно ПС. Дава възможност за избор на марка(при
което води до Choose Vehicle Menu със свободни ПС от избраната марка) или връщане в Main Menu
○ Vehicle Details Menu, със следното съдържание:
■ <Детайли за марката - име и кратка информация>
■ <Детайли за модела - име и кратка информация>
■ <Брой свободни ПС от тази марка и модел>
■ <Цена за наемане за едно денонощие>
■ Опции за наемане на ПС (за текущото изпълнение на програмата) и за връщане в предходното меню - Choose Vehicle
Menu (с последните филтри за менюто)
Задачи за самоподготовка
Задача 8 (2/2)
● Направете отделен модул (в отделни .h и .c файлове) за съхранение на информацията, свързана с различните марки
и модели на превозни средства. За всяка марка, както и за всеки модел от дадена марка трябва да пазим име и
кратко описание на марката/модела. В бъдеще модулът ще има функции за четене на информацията от файл(ове)
или от мрежата, засега можем да хард-коднем примерни данни.
● Направете отделен модул за съхранение и достъп до информацията за всичките ПС на компанията, с цена за
денонощие и наличност (дали е наличен за текущото изпълнение на програмата засега)
● Напревете трети, основен модул на програмата, който да чете избора на потребителя и да контролира потока на
изпълнение на програмата, на базата на направения от потребителя избор.
● Дефинирайте и използвайте отделни типове за различните видове данни:
○ Информация за марка(име и кратко описание засега)
○ Информация за модел от марка(име и кратко описание засега)
○ Информация за превозните средства с които разполага компанията(марка, модел, наличност, цена за всяко ПС)
Задачи за самоподготовка
Задачи за самоподготовка
Задача 9
● Дефинирайте тип Person с име и възраст.
● Дефинирайте масив от Person и го инициализирайте.
● Дефинирайте тип PersonNode с 2 member-а: Person и PersonNode* - информация за Person и указател към PersonNode, който
може да сочи към друг обект от тип PersonNode.
● Дефинирайте масив от тип PersonNode. Обходете масива и копирайте информацията за всеки елемент от съответстващия му по
индекс елемент от първия масив (от тип Person). В същия цикъл пренасочете всеки member указател към PersonNode към
следващия елемент от масива, който обхождаме (към 0 за последния елемент)
● Принтирайте съдържанието на създадения от нас свързан списък, използвайки само PersonNode обекти и техните members (без
да използвате името на масивите). Дефинирайте отделна функция за тази цел.
● Обходете масива отново и пренасочете member указателите на всеки PersonNode, чиито Person обект е с възраст над 18 год,
така че да сочат към следващия обект от масива от тип PersonNode, чиито Person member е с възраст над 18 год. (ако обектите с
индекс 0 и 1 и 4 са над 18, обектите с индекс 2 и 3 са под 18, member указателят на обект с индекс 1 трябва да почне да сочи не
към обект с индекс 2, ами да “пропусне всички следващи елементи под 18” и да се пренасочи към обект с индекс 4)
● Принтирайте съдържанието на масива (всички хора) и на списъка (само над 18).